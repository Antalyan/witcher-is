@page "/AdminPage"
@attribute [Authorize(Roles = RoleNames.UserManager + "," + RoleNames.Admin)] 


@using Microsoft.IdentityModel.Tokens
@using WitcherProject.BL.Services.Interfaces
@using WitcherProject.DAL.Models
@using WitcherProject.PresentationLayer.Model
@using WitcherProject.PresentationLayer.Model.Administration
@using WitcherProject.Shared
@using Microsoft.AspNetCore.Components
@using Mapster
@using WitcherProject.BL.DTOs
@using WitcherProject.BL.DTOs.Person

@inject IPersonService PersonService
@inject NavigationManager _navigationManager


@if (roles.IsNullOrEmpty() || userWithRoles.IsNullOrEmpty())
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h3>Users</h3>
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>UserName</th>
            <th>Name</th>
            <th>Surname</th>
            <th>Roles</th>
            <th></th>
            
        </tr>
        </thead>
        <tbody>
        @foreach (var user in userWithRoles)
        {
            <tr class="@(!user.IsActive ? "table-secondary" : "")">
                    <td>@user.Id.</td>
                    <td>@user.UserName</td>
                    <td>@user.Name</td>
                    <td>@user.Surname</td>
                    <td> @(!user.UserRoleDtos.IsNullOrEmpty() ? user.UserRoleDtos.Select(ur => ur.Role.Name).Aggregate((x, y) => x + ", " + y) : "")</td>
                    <td>
                        @if (user.IsActive)
                        {
                            <button class="btn btn-outline-danger rounded-circle" onclick="@(() => Disable(user))">
                                <i class="bi bi-x" title="Disable"></i>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-outline-success " onclick="@(() => Enable(user))">
                                <i class="bi bi-check" title="Enable"></i>
                            </button>
                        }
                    </td>

        </tr>
        }
        </tbody>
    </table>

}

<EditForm OnValidSubmit="OnRoleUserSubmit" Model="roleUserModel">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <label class="form-label col-sm-10 col-md-4">
        User name: <InputText class="form-control" @bind-Value="@roleUserModel.UserName" DisplayName="User name"></InputText>
    </label>
    <label class="form-label col-sm-10 col-md-4">
        Role name: <InputText class="form-control" @bind-Value="@roleUserModel.RoleName" DisplayName="Role name"></InputText>
    </label>
    <button class="btn btn-lg btn-primary btn-block" type="submit">Add</button>
        
    @if (!string.IsNullOrEmpty(roleUserModel.Error))
    {
        <div class="alert alert-danger mt-2 mb-2" role="alert">
            @roleUserModel.Error
        </div>
    }
</EditForm>

<h3>Role</h3>

<table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>

        </tr>
        </thead>
        <tbody>
        @foreach (var role in roles)
        {
            <tr>
                <td>@role.Id.</td>
                <td>@role.Name</td>
            </tr>
        }
        </tbody>
    </table>

    <EditForm OnValidSubmit="OnRoleSubmit" Model="createRole">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        @if (!string.IsNullOrEmpty(createRoleError))
        {
            <div class="alert alert-danger mt-2 mb-2" role="alert">
                @createRoleError
            </div>
        }
        <label class="form-label col-sm-10 col-md-4">
            Role name: <InputText class="form-control" @bind-Value="@createRole.Name" DisplayName="Role name"></InputText>
        </label>
        <button class="btn btn-lg btn-primary btn-block" type="submit">Add</button>
    </EditForm>


@code {

    private List<RoleDto> roles= new ();

    private IEnumerable<PersonCompleteDto> userWithRoles;

    private RoleDto createRole = new ();

    private RoleUserModel roleUserModel = new();

    private string createRoleError = "" ;

    protected override async Task OnInitializedAsync()
    {
        roles = await PersonService.GetRoles();
        userWithRoles = await PersonService.GetAllUserWithRoles();
    }

    private async Task OnRoleSubmit()
    {
        createRoleError = null;
        try
        {
            await PersonService.CreateRole(createRole);
            StateHasChanged();
        }
        catch (Exception e)
        {
            createRoleError = e.Message;
        }
        
    }
    
    private async Task OnRoleUserSubmit()
    {
        roleUserModel.Error = null;
        try
        {
            await PersonService.AssignRoleToUserAsync(roleUserModel.UserName, roleUserModel.RoleName);
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            roleUserModel.Error = e.Message;
        }
    }

    private async Task Disable(PersonCompleteDto person)
    {
        await PersonService.DisableUserByIdAsync(person.Id);
        userWithRoles = await PersonService.GetAllUserWithRoles();
        StateHasChanged();
    }
    
    private async Task Enable(PersonCompleteDto person)
    {
        person.IsActive = true;
        await PersonService.UpdateUserAsync(person.Adapt<PersonUpdateDto>());
        userWithRoles = await PersonService.GetAllUserWithRoles();
        StateHasChanged();
    }

}