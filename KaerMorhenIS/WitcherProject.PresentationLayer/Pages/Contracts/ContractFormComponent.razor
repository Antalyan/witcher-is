@using Mapster
@using WitcherProject.BL.Services.Interfaces
@using WitcherProject.Shared
@using WitcherProject.Shared.Enums
@using WitcherProject.BL.DTOs.Person
@using WitcherProject.BL.DTOs.Contract
@using WitcherProject.BL.DTOs.Contractor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService AuthorizationService

@inject IContractFacade ContractFacade
@inject IContractService ContractService
@inject IPersonService PersonService
@inject IContractorService ContractorService
@inject NavigationManager NavigationManager

@if (contractorOptions == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @if (showSuccess)
    {
        <div class="alert alert-success mt-4 mb-4" role="alert">
            <p>Contract details succesfully saved.</p>
        </div>
    }
    <EditForm Model="@contract" OnValidSubmit="SaveContract">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                Name:
                <InputText class="form-control" @bind-Value="@contract.Name" DisplayName="contract"
                           disabled="@(!hasOwnerRights)">
                </InputText>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                Description:
                <InputTextArea class="form-control" @bind-Value="@contract.Description" DisplayName="description"
                           disabled="@(!hasOwnerRights)">
                </InputTextArea>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                State:
                <InputSelect class="form-control" @bind-Value="contract.State" DisplayName="state" disabled="@(!hasOwnerRights)">
                    @foreach (var state in stateOptions)
                    {
                        <option value=@state>@state</option>
                    }
                </InputSelect>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                Start date:
                <InputDate class="form-control" @bind-Value=@contract.StartDate DisplayName="start date"
                           disabled>
                </InputDate>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                End date:
                <InputDate class="form-control" @bind-Value=@contract.EndDate DisplayName="end date"
                           disabled>
                </InputDate>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                Deadline:
                <InputDate class="form-control" @bind-Value=@contract.Deadline DisplayName="deadline"
                           disabled="@(!hasOwnerRights)">
                </InputDate>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                Location:
                <InputText class="form-control" @bind-Value="@contract.Location" DisplayName="location"
                           disabled="@(!hasOwnerRights)">
                </InputText>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                Assigned person:
                <InputSelect class="form-control" @bind-Value="@personId" disabled="@(!hasFullRights)">
                    @if (hasFullRights || !hasOwnerRights)
                    {
                        <option value=""></option>
                    }
                    @foreach (var person in personOptions)
                    {
                        <option value=@person.Id>@(person.Name + " " + person.Surname)</option>
                    }
                </InputSelect>
            </label>
        </div>
        <div>
            <label class="form-label col-sm-10 col-md-4 pb-2">
                @* TODO limit witcher view by id *@
                Contractor:
                <InputSelect class="form-control" @bind-Value="@contractorId" disabled="@(!hasOwnerRights)">
                    <option value=""></option>
                    @foreach (var contractor in contractorOptions)
                    {
                        <option value=@contractor.Id>@(contractor.Name + " " + contractor.Surname)</option>
                    }
                </InputSelect>
            </label>
        </div>
        @if (hasOwnerRights)
        {
            <button class="btn btn-primary" type="submit">Save</button>
        }
    </EditForm>
}

@code {

    [Parameter]
    public int? ContractId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool hasOwnerRights = false;
    private bool hasFullRights = false;

    private PersonCompleteDto activePerson;

    private ContractDetailedDto contract;

    private IEnumerable<ContractState> stateOptions;
    private IEnumerable<PersonSimpleDto> personOptions;
    private IEnumerable<ContractorDto> contractorOptions;

    private int? personId;
    private int? contractorId;
    private bool showSuccess = false;


    protected override async Task OnInitializedAsync()
    {
        if (ContractId == null) //Add
        {
            contract = new ContractDetailedDto {Id = -1};
        }
        else //Edit
        {
            contract = await ContractService.GetContractById(ContractId ?? -1);
            if (contract.Person != null)
            {
                personId = contract.Person.Id;
            }
            if (contract.Contractor != null)
            {
                contractorId = contract.Contractor.Id;
            }
        }

        var user = (await authenticationStateTask).User;
        activePerson = await PersonService.GetPersonByLogin(user.Identity.Name!);
        if (user.IsInRole(RoleNames.ContractManager) || user.IsInRole(RoleNames.Admin))
        {
            hasFullRights = true;
            hasOwnerRights = true;
        }
        else if (personId == activePerson.Id || ContractId == null)
        {
            hasOwnerRights = true;
            personId = activePerson.Id;
        }

        stateOptions = hasFullRights ? ContractStateUtil.GetAllStates() : ContractStateUtil.GetUserSettableStates(contract.State);
        personOptions = hasFullRights ? await PersonService.GetAllWitchers() : new List<PersonSimpleDto> { activePerson.Adapt<PersonSimpleDto>() };
        contractorOptions = await ContractorService.GetAllContractors();
    }

    [Authorize(Roles = RoleNames.ContractManager + "," + RoleNames.Admin + "," + RoleNames.Witcher)]
    private async Task SaveContract()
    {
        await ContractFacade.SaveContract(personId, contractorId, contract.Adapt<ContractUpsertDto>());
        showSuccess = true;
    }
}