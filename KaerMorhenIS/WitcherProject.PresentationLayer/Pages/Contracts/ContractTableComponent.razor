@using WitcherProject.BL.Services.Interfaces
@using WitcherProject.BL.DTOs.Contract
@using WitcherProject.BL.DTOs.Contractor
@using WitcherProject.BL.DTOs.Person
@using WitcherProject.Shared
@using WitcherProject.Shared.Enums
@using Microsoft.AspNetCore.Components

@inject IContractService ContractService
@inject IContractorService ContractorService
@inject IPersonService PersonService
@inject NavigationManager NavigationManager

@if (contracts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div>
        <EditForm Model=@filter OnValidSubmit="Filter">
            <div class="row g-3">
                <div class="col-auto">
                    <label class="form-label">
                        Name:
                        <InputText class="form-control" @bind-Value=@filter.Name>
                        </InputText>
                    </label>
                </div>

                <div class="col-auto">
                    <label class="form-label">
                        State:
                        <InputSelect class="form-control" @bind-Value=@filter.State>
                            <option value="">All</option>
                            @foreach (var state in Enum.GetNames(typeof(ContractState)))
                            {
                                <option value=@state>@state</option>
                            }
                        </InputSelect>
                    </label>
                </div>

                <div class="col-auto">
                    <label class="form-label">
                        Deadline:
                        <InputDate class="form-control col" @bind-Value=@filter.Deadline>
                        </InputDate>
                    </label>
                </div>

                @if (PersonIdLimit == null)
                {
                    <div class="col-auto">
                        <label class="form-label">
                            Assigned person:
                            <InputSelect class="form-control col" @bind-Value=@filter.PersonId>
                                <option value="">All</option>
                                @foreach (var person in allPersons)
                                {
                                    <option value=@person.Id>@(person.Name + " " + person.Surname)</option>
                                }
                            </InputSelect>
                        </label>
                    </div>
                }

                <div class="col-auto">
                    <label class="form-label">
                        Contractor:
                        <InputSelect class="form-control col" @bind-Value=@filter.ContractorId>
                            <option value="">All</option>
                            @foreach (var contractor in allContractors)
                            {
                                <option value=@contractor.Id>@(contractor.Name + " " + contractor.Surname)</option>
                            }
                        </InputSelect>
                    </label>
                </div>

                <div class="col-auto d-flex align-items-end pb-2">
                    <button class="btn btn-primary form-control" type="submit">Filter</button>
                </div>
                <div class="col-auto d-flex align-items-end pb-2">
                    <button class="btn btn-primary form-control" type="submit" @onclick=Reset>Reset</button>
                </div>
            </div>
        </EditForm>
    </div>
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>State</th>
            <th>Start date</th>
            <th>End date</th>
            <th>Deadline</th>
            <th>Location</th>
            @if (PersonIdLimit == null)
            {
                <th>Assigned to</th>
            }
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var cont in contracts)
        {
            <tr>
                <td>@cont.Name</td>
                <td>@cont.Description</td>
                <td>@cont.State</td>
                <td>@cont.StartDate</td>
                <td>@cont.EndDate</td>
                <td>@cont.Deadline</td>
                <td>@cont.Location</td>
                <td>@(cont.Person != null ? cont.Person.Name + " " + cont.Person?.Surname : null) </td>
                <td>
                    <div class="hstack gap-3">
                        <button class="btn btn-outline-primary rounded-circle" @onclick="() => RedirectToDetail(cont.Id)">
                            @if (HasOwnerRights(cont.Person?.Id))
                            {
                                <i class="bi bi-pencil" title="Edit"></i>
                            }
                            else
                            {
                                <i class="bi bi-eye" title="Details"></i>
                            }
                        </button>
                        @if (_hasAllRights)
                        {
                            <button class="btn btn-outline-danger rounded-circle" @onclick="() => Delete(cont.Id)">
                                <i class="bi bi-x" title="Delete"></i>
                            </button>
                        }
                        else if (!HasOwnerRights(cont.Person?.Id) && cont.State == ContractState.Open)
                        {
                                @* //TODO: add action: pop-up window with request text *@
                            <button class="btn btn-outline-primary rounded-circle">
                                <i class="bi bi-envelope" title="Send request"></i>
                            </button>
                        }
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <nav class="d-flex justify-content-end" aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item page-pre" @onclick="Previous">
                <a class="page-link" href="javascript:void(0)">Previous</a>
            </li>
            <li class="page-item @IsActive(1)" @onclick="() => SetPageNumber(1)">
                <a class="page-link" href="javascript:void(0)">1</a>
            </li>
            <li class="page-item @IsActive(2)" @onclick="() => SetPageNumber(2)">
                <a class="page-link" href="javascript:void(0)">2</a>
            </li>
            @if (filter.RequestedPageNumber > 2)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="javascript:void(0)">...</a>
                </li>
                <li class="page-item active">
                    <a class="page-link" href="javascript:void(0)">@filter.RequestedPageNumber</a>
                </li>
            }
            <li class="page-item" @onclick="Next">
                <a class="page-link" href="javascript:void(0)">Next</a>
            </li>
        </ul>
    </nav>
}

@code {
    private IEnumerable<ContractDetailedDto> contracts;
    private IEnumerable<PersonSimpleDto> allPersons;
    private IEnumerable<ContractorDto> allContractors;
    private ContractFilterDto filter;

    // Used to restrict contracts to those assigned to a chosen person
    [Parameter]
    public int? PersonIdLimit { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private bool _hasAllRights = false;
    private int _userId;

    private async Task SetPageNumber(int number)
    {
        filter.RequestedPageNumber = number;
        contracts = await ContractService.GetContractsFilteredAsync(filter);
    }

    private async Task Previous()
    {
        if (filter.RequestedPageNumber > 1)
        {
            filter.RequestedPageNumber--;
            contracts = await ContractService.GetContractsFilteredAsync(filter);
        }
    }

    private async Task Next()
    {
        filter.RequestedPageNumber++;
        contracts = await ContractService.GetContractsFilteredAsync(filter);
    }

    private string IsActive(int givenPageNumber) => givenPageNumber == filter.RequestedPageNumber ? "active" : "";

    private bool HasOwnerRights(int? assignedPersonId) => _hasAllRights || assignedPersonId == _userId;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;
        _userId = (await PersonService.GetPersonByLogin(user.Identity.Name!)).Id;
        if (user.IsInRole(RoleNames.ContractManager) || user.IsInRole(RoleNames.Admin))
        {
            _hasAllRights = true;
        }

        filter = new ContractFilterDto { RequestedPageNumber = 1 };
        if (PersonIdLimit != null)
        {
            filter.PersonId = PersonIdLimit;
        }
        contracts = await ContractService.GetContractsFilteredAsync(filter);
        allPersons = await PersonService.GetAllSimpleUsersAsync();
        allContractors = await ContractorService.GetAllContractorsAsync();
    }

    [Authorize(Roles = RoleNames.ContractManager + "," + RoleNames.Admin)]
    private async Task Delete(int contractIdToDelete)
    {
        await ContractService.DeleteContractAsync(contractIdToDelete);

    //StateHasChanged() didn't work
        contracts = await ContractService.GetContractsFilteredAsync(filter);
    }

    private async Task Filter()
    {
        contracts = await ContractService.GetContractsFilteredAsync(filter);
    }

    private async Task Reset()
    {
        filter = new ContractFilterDto { RequestedPageNumber = 1 };
        contracts = await ContractService.GetContractsFilteredAsync(filter);
    }

    private void RedirectToDetail(int contractId)
    {
        NavigationManager.NavigateTo($"/contracts/{contractId}", true);
    }

}