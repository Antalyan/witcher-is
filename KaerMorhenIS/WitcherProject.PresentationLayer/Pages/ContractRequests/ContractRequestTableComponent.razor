@using WitcherProject.BL.Services.Interfaces
@using WitcherProject.BL.DTOs.ContractRequest
@using WitcherProject.BL.DTOs.Person
@using WitcherProject.Shared.Enums
@using Microsoft.AspNetCore.Components
@using WitcherProject.BL.DTOs.Contract


@inject IContractRequestService ContractRequestService
@inject IPersonService PersonService
@inject IContractService ContractService
@inject NavigationManager NavigationManager
@inject ILogger<ContractRequestTableComponent> Logger


@if (contractRequests == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
        <div>
            <EditForm Model=@filter OnValidSubmit="Filter">
                <div class="row g-3">
                    <div class="col-auto">
                        <label class="form-label">
                            State:
                            <InputSelect class="form-control" @bind-Value=@filter.State>
                                <option value="">All</option>
                                @foreach (var state in Enum.GetNames(typeof(ContractRequestState)))
                                {
                                    <option value=@state>@state</option>
                                }
                            </InputSelect>
                        </label>
                    </div>
                    
                    @* TODO: optionally rework to "from" and "to" filtering?*@
                    <div class="col-auto">
                        <label class="form-label">
                            Created since:
                            <InputDate class="form-control col" @bind-Value=@filter.CreatedOn>
                            </InputDate>
                        </label>
                    </div>
    
                        <div class="col-auto">
                            <label class="form-label">
                                Requesting person:
                                <InputSelect class="form-control col" @bind-Value=@filter.PersonId>
                                    <option value="">All</option>
                                    @foreach (var person in allPersons)
                                    {
                                        <option value=@person.Id>@(person.Name + " " + person.Surname)</option>
                                    }
                                </InputSelect>
                            </label>
                        </div>

                    <div class="col-auto">
                        <label class="form-label">
                            Requested contract:
                            <InputSelect class="form-control col" @bind-Value=@filter.ContractId>
                                <option value="">All</option>
                                @foreach (var contract in allContracts)
                                {
                                    <option value=@contract.Id>@(contract.Name)</option>
                                }
                            </InputSelect>
                        </label>
                    </div>
    
                    <div class="col-auto d-flex align-items-end pb-2">
                        <button class="btn btn-primary form-control" type="submit">Filter</button>
                    </div>
                    <div class="col-auto d-flex align-items-end pb-2">
                        <button class="btn btn-primary form-control" type="submit" @onclick=Reset>Reset</button>
                    </div>
                </div>
            </EditForm>
        </div>
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Text</th>
            <th>State</th>
            <th>Created on</th>
            <th>Requesting person</th>
            <th>Requested contract</th>
        </tr>
        </thead>

        <tbody>
        @foreach (var request in contractRequests)
        {
            <tr>
                <td>@request.Id</td>
                <td>@request.Text</td>
                <td>@request.State</td>
                <td>@request.CreatedOn</td>
                <td>@(request.Person.Name + " " + request.Person.Surname) </td>
                <td>@request.Contract.Name </td>
                <td>
                    <div class="hstack gap-3">
                        <button class="btn btn-primary rounded-circle" @onclick="() => RedirectToDetail(request.Id)">
                            @if (request.State == ContractRequestState.Requested)
                            {
                                <i class="bi bi-pencil" title="Edit"></i>
                            }
                            else
                            {
                                <i class="bi bi-eye" title="Details"></i>
                            }
                        </button>
                        <button class="btn btn-primary rounded-circle" @onclick="() => Delete(request.Id)">
                            <i class="bi bi-x" title="Delete"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
    <nav class="d-flex justify-content-end" aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item page-pre" @onclick="Previous">
                <a class="page-link" href="javascript:void(0)">Previous</a>
            </li>
            <li class="@IsActive(1)" @onclick="() => SetPageNumber(1)">
                <a class="page-link" href="javascript:void(0)">1</a>
            </li>
            <li class="@IsActive(2)" @onclick="() => SetPageNumber(2)">
                <a class="page-link" href="javascript:void(0)">2</a>
            </li>
            @if (filter.RequestedPageNumber > 2)
            {
                <li class="disabled">
                    <a class="page-link" href="javascript:void(0)">...</a>
                </li>
                <li class="active">
                    <a class="page-link" href="javascript:void(0)">@filter.RequestedPageNumber</a>
                </li>
            }
            <li class="page-item" @onclick="Next">
                <a class="page-link" href="javascript:void(0)">Next</a>
            </li>
        </ul>
    </nav>
}

@code {
    private IEnumerable<ContractRequestDetailedDto> contractRequests;
    private IEnumerable<PersonSimpleDto> allPersons;
    private IEnumerable<ContractSimpleDto> allContracts;
    private ContractRequestFilterDto filter;
    
    private bool _locked = false;

    private async Task SetPageNumber(int number)
    {
        filter.RequestedPageNumber = number;
        contractRequests = await ContractRequestService.GetContractRequestsFilteredAsync(filter);
    }
    
    private async Task Previous()
    {
        if (filter.RequestedPageNumber > 1)
        {
            filter.RequestedPageNumber--;
            contractRequests = await ContractRequestService.GetContractRequestsFilteredAsync(filter);
        }
    }
    
    private async Task Next()
    {
        filter.RequestedPageNumber++;
        contractRequests = await ContractRequestService.GetContractRequestsFilteredAsync(filter);
    }
    
    private string IsActive(int givenPageNumber) => givenPageNumber == filter.RequestedPageNumber ? "active" : "page-item";
    
    protected override async Task OnInitializedAsync()
    {
        filter = new ContractRequestFilterDto { RequestedPageNumber = 1 };
        contractRequests = await ContractRequestService.GetContractRequestsFilteredAsync(filter);
        allPersons = await PersonService.GetAllSimpleUsersAsync();
        allContracts = await ContractService.GetAllSimpleContractsAsync();
    }
    
    private async Task Filter()
    {
        if (_locked)
        {
            Logger.LogWarning("Filter could not be performed due to race condition");
            return;
        }
        _locked = true;
        contractRequests = await ContractRequestService.GetContractRequestsFilteredAsync(filter);       
        _locked = false;
    }

    private async Task Delete(int contractRequestToDelete)
    {
        await ContractRequestService.DeleteContractRequestAsync(contractRequestToDelete);
        contractRequests = await ContractRequestService.GetContractRequestsFilteredAsync(filter);
    }

    private async Task Reset()
    {
        if (_locked)
        {
            Logger.LogWarning("Reset could not be performed due to race condition");
            return;
        }
        _locked = true;
        
        // TODO: implement better way of reseting the filter? E.g. via resetting properties to default
        filter = new ContractRequestFilterDto() { RequestedPageNumber = 1 };
        contractRequests = await ContractRequestService.GetContractRequestsFilteredAsync(filter);      
        
        _locked = false;
    }
    
    private void RedirectToDetail(int contractRequestId)
    {
        NavigationManager.NavigateTo($"/contractRequests/edit/{contractRequestId}", true);
    }

}